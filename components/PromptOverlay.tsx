"use client";

import React, { useState, useRef, useEffect } from "react";
import Draggable from "react-draggable";
import StructuredScenarioEditor from "./StructuredScenarioEditor";
import socket from "@/utils/socket";
import { Rnd } from "react-rnd";

interface PromptOverlayProps {
  prompt1: string;
  prompt2: string;
  onChangePrompt1: (text: string) => void;
  onChangePrompt2: (text: string) => void;
  onImportJson: (json: string) => void;
  structuredData: any;
  storyboardImages: string[];
}

const PromptOverlay: React.FC<PromptOverlayProps> = ({
  prompt1,
  // prompt2,
  onChangePrompt1,
  onChangePrompt2,
  onImportJson,
  structuredData,
  storyboardImages,
}) => {
  const [localStructuredData, setLocalStructuredData] = useState(structuredData);
  const [localImages, setLocalImages] = useState(storyboardImages);

  const scenarioRef = useRef<HTMLDivElement>(null);
  const structuredRef = useRef<HTMLDivElement>(null);
  const storyboardRef = useRef<HTMLDivElement>(null);

  const [modalImage, setModalImage] = useState<string | null>(null);

  useEffect(() => {
    const handleConnect = () => {
      console.log("üü¢ [socket] Ïó∞Í≤∞Îê®:", socket.id);
    };

    const handleCompletion = (text: string) => {
      console.log("üü° [socket] completion ÏùëÎãµ ÏàòÏã†:", text);
      onChangePrompt2(text);
      onImportJson(text);
    };

    const handleStructuredResult = (data: any) => {
      console.log("üß© [socket] structuredResult ÏàòÏã†:", data);
      setLocalStructuredData(data);
    };

    // const handleStoryboardResult = async (data: any) => {
    //   console.log("üì¶ storyboardResult Ï†ÑÏ≤¥ ÏùëÎãµ ÎÇ¥Ïö©:", JSON.stringify(data, null, 2));
    //   if (Array.isArray(data?.storyboards)) {
    //     await generateStoryboardImages(data);
    //   } else {
    //     console.warn("üö´ [socket] storyboardResult: Ïú†Ìö®Ìïú storyboards ÏóÜÏùå", data);
    //   }
    // };

    const handleConvertedScenario = (scenarioText: string) => {
      console.log("üü¢ [convertedScenario] ÏãúÎÇòÎ¶¨Ïò§ ÏàòÏã†:", scenarioText);

      // ÏãúÎÇòÎ¶¨Ïò§ ÏûÖÎ†•Ï∞Ω Ï±ÑÏö∞Í∏∞
      onChangePrompt1(scenarioText);

      // Ïù¥ ÏãúÎÇòÎ¶¨Ïò§Î•º Í∏∞Î∞òÏúºÎ°ú Îã§Ïùå Îã®Í≥Ñ ÏûêÎèô Ïã§Ìñâ
      socket.emit("initialPrompt", scenarioText);           // Graph
      socket.emit("phase4StoryboardFormat", scenarioText);  // Storyboard
    };


    socket.on("connect", handleConnect);
    socket.on("completion", handleCompletion);
    socket.on("structuredResult", handleStructuredResult);
    // socket.on("storyboardResult", handleStoryboardResult);
    socket.on("convertedScenario", handleConvertedScenario); // ‚úÖ Ï∂îÍ∞ÄÎê®

    return () => { 
      socket.off("connect", handleConnect);
      socket.off("completion", handleCompletion);
      socket.off("structuredResult", handleStructuredResult);
      // socket.off("storyboardResult", handleStoryboardResult);
      socket.off("convertedScenario", handleConvertedScenario); // ‚úÖ Ï∂îÍ∞ÄÎê®
    };
  }, [onChangePrompt2, onImportJson, onChangePrompt1]);


  const handleSend = async () => {
    console.log("üì§ [handleSend] ÏÇ¨Ïö©Ïûê ÏûÖÎ†• ÏãúÎÇòÎ¶¨Ïò§:", prompt1);

    socket.emit("initialPrompt", prompt1);   // Í∑∏ÎûòÌîÑ JSON
    socket.emit("phase1StructuredFormat", prompt1);  // Íµ¨Ï°∞Ìôî JSON
    socket.emit("phase4StoryboardFormat", prompt1);  // Ïä§ÌÜ†Î¶¨Î≥¥Îìú JSON
  };

  const generateStoryboardImages = async (scenarioStructuredJson: any) => {
    try {
      console.log("üì§ [generateStoryboardImages] APIÏóê Î≥¥ÎÇº JSON:", scenarioStructuredJson);

      const res = await fetch("/api/generateImagesLocal", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(scenarioStructuredJson),
      });

      const result = await res.json();

      if (result && Array.isArray(result.imageUrls)) {
        console.log("üñºÔ∏è [generateStoryboardImages] ÏÉùÏÑ±Îêú Ïù¥ÎØ∏ÏßÄ URL:", result.imageUrls);
        setLocalImages(result.imageUrls);
      } else {
        console.warn("üö´ [generateStoryboardImages] Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå® ÏùëÎãµ:", result);
      }
    } catch (err) {
      console.error("‚ùå [generateStoryboardImages] Ïò§Î•ò:", err);
    }
  };

  const handleStructuredSend = () => {
    if (!localStructuredData) return;
    console.log("üì§ [Structured ‚ñ∂ Ï†ÑÏÜ°] Íµ¨Ï°∞Ìôî Îç∞Ïù¥ÌÑ∞:", localStructuredData);

    socket.emit("convertStructuredToScenario", localStructuredData); // Ïù¥ Ìïú Ï§ÑÏù¥Î©¥ Îê®!
  };

  return (
    <>
      {/* Scenario */}
      <Rnd
        default={{ x: 50, y: 50, width: 320, height: 240 }}
        minWidth={280}
        minHeight={200}
        bounds="window"
        className="draggable-window"
      >
        <h3 style={{ marginBottom: "8px" }}>Scenario</h3>
        <textarea
          value={prompt1}
          onChange={(e) => onChangePrompt1(e.target.value)}
          className="prompt-textarea"
        />
        <button onClick={handleSend} className="send-button">‚ñ∂</button>
      </Rnd>


      {/* Structured Editor */}
      {localStructuredData && (
        <Rnd
          default={{
            x: 400,
            y: 50,
            width: 400,
            height: 500,
          }}
          minWidth={400}
          minHeight={500}
          bounds="window"
          className="draggable-window structured"
        >
          <h3>Structured Editor</h3>
          <div className="structured-editor-wrapper">
            <StructuredScenarioEditor
              data={localStructuredData}
              onChange={(data) => setLocalStructuredData(data)}
            />
          </div>

          <button onClick={handleStructuredSend} className="send-button">‚ñ∂</button>
        </Rnd>
      )}


      {/* Storyboard */}
      {localImages.length > 0 && (
        <Rnd
          default={{
            x: 50,
            y: 400,
            width: 500,
            height: 300,
          }}
          minWidth={300}
          minHeight={200}
          bounds="window"
          style={{
            background: "#1e1e1e",
            border: "1px solid #444",
            borderRadius: "8px",
            padding: "12px",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.3)",
            color: "white",
            zIndex: 10,
            overflow: "auto",
          }}
        >
          <h3>Storyboard</h3>
          <div className="storyboard-grid">
            {localImages.map((url, idx) => (
              <img
                key={idx}
                src={url}
                alt={`Storyboard ${idx + 1}`}
                className="storyboard-image"
                onClick={() => setModalImage(url)}
              />
            ))}
          </div>
        </Rnd>
      )}

      {/* Modal */}
      {modalImage && (
        <div
          className="image-modal-overlay"
          onClick={() => setModalImage(null)}
        >
          <div className="image-modal-content">
            <img src={modalImage} alt="Preview" />
          </div>
        </div>
      )}
    </>
  );

};

export default PromptOverlay;
